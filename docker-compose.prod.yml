# SafeChat Production Docker Compose Configuration
# Usage: docker compose -f docker-compose.prod.yml up -d
#
# Before deployment:
# 1. Copy .env.production.example to .env and update values
# 2. Ensure proper firewall rules are in place
# 3. Consider using a reverse proxy (Caddy, Traefik) for HTTPS

services:
  mongodb:
    image: mongo:7
    container_name: im-mongodb-prod
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE:-safechat}
    volumes:
      - mongodb_data:/data/db
      - mongodb_backup:/backup
    networks:
      - im-network
    # Only expose MongoDB port for debugging, comment out in production
    # ports:
    #   - "127.0.0.1:27017:27017"
    command: mongod --auth
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: im-backend-prod
    restart: always
    ports:
      # Only expose backend port for debugging, nginx should proxy in production
      - "127.0.0.1:3000:3001"
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - PORT=${PORT:-3001}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-*}
      - NODE_ENV=production
    networks:
      - im-network
    volumes:
      - backend_uploads:/app/uploads
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  frontend:
    image: nginx:alpine
    container_name: im-frontend-prod
    restart: always
    ports:
      - "80:80"
      # For HTTPS, uncomment and configure SSL certificates
      # - "443:443"
    volumes:
      - ./frontend/modern:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      # For HTTPS, mount SSL certificates
      # - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - im-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

volumes:
  mongodb_data:
    driver: local
  mongodb_backup:
    driver: local
  backend_uploads:
    driver: local

networks:
  im-network:
    driver: bridge
